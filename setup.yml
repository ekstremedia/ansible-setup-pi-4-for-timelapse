---
- name: Raspberry Pi Setup
  hosts: localhost
  become: yes
  vars:
    pi_home: "/home/pi"
    oh_my_zsh_install_script: "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
    zsh_autosuggestions_repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
    repositories:
      - repo: "https://github.com/ekstremedia/pi-timelapse-3.git"
        dest: "{{ pi_home }}/pi-timelapse-3"
      - repo: "https://github.com/ekstremedia/raspberrypi-picamera-timelapse.git"
        dest: "{{ pi_home }}/raspberrypi-picamera-timelapse"
    hostname: "sortlandcam-new"
    vsftpd_conf_content: |
      # [Your vsftpd.conf content goes here]

  tasks:
    - name: Check if Wi-Fi credentials file exists
      stat:
        path: wifi_credentials.yml
      register: wifi_credentials_file

    - name: Include Wi-Fi credentials if available
      include_vars:
        file: wifi_credentials.yml
      when: wifi_credentials_file.stat.exists

    - name: Update apt cache and upgrade packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required apt packages
      apt:
        name:
          - locales
          - vim
          - screen
          - neofetch
          - tree
          - ffmpeg
          - exiftool
          - zsh
          - python3-dev
          - libcap-dev
          - libcamera-apps
          - libcamera-dev
          - python3-libcamera
          - git
          - python3-setuptools
          - python3-kms++
          - apache2
          - vsftpd
          - python3-yaml
          - python3-colored
          - raspberrypi-kernel-headers
          - python3-venv
          - network-manager          # Ensure NetworkManager is installed
          - uuid-runtime             # Required for uuidgen
        state: present

    - name: Add pi user to www-data group
      user:
        name: pi
        groups: www-data
        append: yes

    - name: Start and enable Apache2 service
      service:
        name: apache2
        state: started
        enabled: yes

    - name: Create timelapse_images directory
      file:
        path: /var/www/html/timelapse_images
        state: directory
        owner: pi
        group: www-data
        mode: "0755"

    - name: Change ownership of /var/www/html to pi
      file:
        path: /var/www/html
        owner: pi
        group: www-data
        recurse: yes

    - name: Check if Oh My Zsh is already installed
      become_user: pi
      stat:
        path: "{{ pi_home }}/.oh-my-zsh"
      register: oh_my_zsh_installed

    - name: Install Oh My Zsh
      become_user: pi
      shell: |
        sh -c "$(curl -fsSL {{ oh_my_zsh_install_script }})" "" --unattended
      args:
        executable: /bin/bash
      environment:
        ZSH: "{{ pi_home }}/.oh-my-zsh"
      when: not oh_my_zsh_installed.stat.exists

    - name: Change default shell to zsh for pi user
      user:
        name: pi
        shell: /usr/bin/zsh

    - name: Install zsh-autosuggestions plugin
      git:
        repo: "{{ zsh_autosuggestions_repo }}"
        dest: "{{ pi_home }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        update: no
      become_user: pi

    - name: Update .zshrc with plugins
      become_user: pi
      lineinfile:
        path: "{{ pi_home }}/.zshrc"
        regexp: '^plugins=\(.*\)'
        line: "plugins=(git zsh-autosuggestions)"

    - name: Clone repositories
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        update: no
      become_user: pi
      loop: "{{ repositories }}"

    - name: Generate nb_NO.UTF-8 locale
      locale_gen:
        name: nb_NO.UTF-8
        state: present

    - name: Update system locale to nb_NO.UTF-8
      lineinfile:
        path: /etc/default/locale
        regexp: "^LANG="
        line: "LANG=nb_NO.UTF-8"

    - name: Deploy vsftpd configuration
      copy:
        content: "{{ vsftpd_conf_content }}"
        dest: /etc/vsftpd.conf
        owner: root
        group: root
        mode: "0644"
      notify: Restart vsftpd

    - name: Ensure vsftpd service is running
      service:
        name: vsftpd
        state: started
        enabled: yes

    - name: Create Python virtual environment in pi-timelapse-3
      pip:
        requirements: "{{ pi_home }}/pi-timelapse-3/requirements.txt"
        virtualenv: "{{ pi_home }}/pi-timelapse-3/venv"
        virtualenv_command: "/usr/bin/python3 -m venv"
        virtualenv_python: python3
      become_user: pi

    - name: Generate UUIDs for extra Wi-Fi networks
      set_fact:
        extra_wifi_networks_with_uuid: "{{ extra_wifi_networks_with_uuid | default([]) + [ item | combine({'uuid': lookup('pipe', 'uuidgen')}) ] }}"
      loop: "{{ extra_wifi_networks }}"
      when: extra_wifi_networks is defined

    - name: Add extra Wi-Fi networks to NetworkManager
      blockinfile:
        path: "/etc/NetworkManager/system-connections/{{ item.ssid }}.nmconnection"
        create: yes
        owner: root
        group: root
        mode: '600'
        block: |
          [connection]
          id={{ item.ssid }}
          uuid={{ item.uuid }}
          type=wifi
          interface-name=wlan0
          permissions=

          [wifi]
          mode=infrastructure
          ssid={{ item.ssid }}

          [wifi-security]
          auth-alg=open
          key-mgmt=wpa-psk
          psk={{ item.psk }}

          [ipv4]
          method=auto

          [ipv6]
          method=ignore
      loop: "{{ extra_wifi_networks_with_uuid }}"
      when: extra_wifi_networks_with_uuid is defined
      notify: Restart NetworkManager

    - name: Reboot the system if required
      reboot:
        msg: "Reboot initiated by Ansible for changes to take effect."
      when: reboot_required | default(false)

  # Uncomment vars_prompt if you wish to prompt for reboot
  # vars_prompt:
  #   - name: reboot_required
  #     prompt: "Reboot is required to complete the installation. Reboot now? (yes/no)"
  #     private: no
  #     default: yes

  handlers:
    - name: Restart vsftpd
      service:
        name: vsftpd
        state: restarted

    - name: Restart NetworkManager
      service:
        name: NetworkManager
        state: restarted
